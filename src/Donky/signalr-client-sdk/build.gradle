apply plugin: 'java'
sourceCompatibility = 1.7
targetCompatibility = 1.7

// ./gradlew clean build generateRelease
apply plugin: 'maven'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.code.gson:gson:2.4'
    compile 'org.java-websocket:java-websocket:1.3.1'
}

// Release part

def groupId = 'net.donky'
def artifactId = 'donky-signalr'
def version = '2.7.0.1'

def localReleaseDest = "${buildDir}/release/${version}"

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version
        pom.project {

            packaging 'jar'

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    distribution 'repo'
                }
            }
            name 'SignalR'
            description 'ASP.NET SignalR for Java'
            url 'http://www.mobiledonky.com/'

            developers {
                developer {
                    id 'marcinswierczek'
                    name 'Marcin Swierczek';
                    email 'sdk@mobiledonky.com';
                }
            }

            scm {
                url 'https://github.com/Donky-Network/DonkySDK-Android-Modular'
                connection 'scm:git:https://github.com/Donky-Network/DonkySDK-Android-Modular.git'
                developerConnection 'scm:git:https://github.com/Donky-Network/DonkySDK-Android-Modular.git'
            }
        }

        // Add other pom properties here if you want (developer details / licenses)
        repository(url: "file://${localReleaseDest}")
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "${artifactId}-${version}.zip"
}

task generateRelease << {
    println "Release ${version} can be found at ${localReleaseDest}/"
    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)